@PACKAGE_INIT@

include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
include(CMakeFindDependencyMacro)

if(APPLE)
    option(USE_LIBSECRET "Use libsecret on macOS instead of Apple keychain" OFF)
endif()

if(DEFINED ENV{VCPKG_ROOT})
    file(TO_CMAKE_PATH $ENV{VCPKG_ROOT} VCPKG_ROOT)
    if(EXISTS "${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
        set(USING_VCPKG ON)
    endif()
endif()

find_dependency(Boost REQUIRED COMPONENTS json)
find_dependency(CURL REQUIRED)
find_dependency(Intl REQUIRED)
find_dependency(sqlcipher CONFIG REQUIRED)
if(USING_VCPKG)
    find_dependency(unofficial-maddy REQUIRED)
endif()
if(APPLE)
    find_library(CF_LIBRARY CoreFoundation)
    find_library(CS_LIBRARY CoreServices)
    find_library(IOKIT_LIBRARY IOKit)
    find_dependency(Threads REQUIRED)
    find_dependency(PkgConfig REQUIRED)
    pkg_check_modules(glib REQUIRED IMPORTED_TARGET glib-2.0)
    pkg_check_modules(gio REQUIRED IMPORTED_TARGET gio-2.0)
    pkg_check_modules(gmodule REQUIRED IMPORTED_TARGET gmodule-2.0)
    pkg_check_modules(gobject REQUIRED IMPORTED_TARGET gobject-2.0)
    pkg_check_modules(gthread REQUIRED IMPORTED_TARGET gthread-2.0)
    if(USE_LIBSECRET)
        pkg_check_modules(libsecret REQUIRED IMPORTED_TARGET libsecret-1)
    else()
        find_library(SECURITY_LIBRARY Security)
    endif()
elseif(LINUX)
    find_dependency(Threads REQUIRED)
    find_dependency(PkgConfig REQUIRED)
    pkg_check_modules(glib REQUIRED IMPORTED_TARGET glib-2.0)
    pkg_check_modules(gio REQUIRED IMPORTED_TARGET gio-2.0)
    pkg_check_modules(gmodule REQUIRED IMPORTED_TARGET gmodule-2.0)
    pkg_check_modules(gobject REQUIRED IMPORTED_TARGET gobject-2.0)
    pkg_check_modules(gthread REQUIRED IMPORTED_TARGET gthread-2.0)
    pkg_check_modules(libsecret REQUIRED IMPORTED_TARGET libsecret-1)
endif()

check_required_components(libnick)
